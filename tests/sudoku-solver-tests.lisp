(defpackage #:sudoku-solver-tests
  (:use #:common-lisp #:sudoku-solver))
(in-package #:sudoku-solver-tests)

(defun grid-to-string (grid &optional add-whitespace)
  "Convert a grid into a string. Periods are empty cells, 1-9 are digits.
If ADD-WHITESPACE is true then it will return a string with spaces/newlines to
be easier to see."
  (format nil (if add-whitespace "~{~{~C~^ ~}~^~%~}" "~{~{~C~}~}")
          (loop for row from 0 below 9
                collect (loop for col from 0 below 9
                              collect (char ".123456789" (aref grid row col))))))

;;; (*hardest20* and *hardest20-solutions* come from https://attractivechaos.github.io/plb/kudoku.html)
(defvar *hardest20*
  '("..............3.85..1.2.......5.7.....4...1...9.......5......73..2.1........4...9"
    ".......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6..."
    ".2..5.7..4..1....68....3...2....8..3.4..2.5.....6...1...2.9.....9......57.4...9.."
    "........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........"
    "12.3....435....1....4........54..2..6...7.........8.9...31..5.......9.7.....6...8"
    "1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1"
    ".......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7....."
    "12.3.....4.....3....3.5......42..5......8...9.6...5.7...15..2......9..6......7..8"
    "..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5."
    "1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6."
    "..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7.."
    "....9..5..1.....3...23..7....45...7.8.....2.......64...9..1.....8..6......54....7"
    "4...3.......6..8..........1....5..9..8....6...7.2........1.27..5.3....4.9........"
    "7.8...3.....2.1...5.........4.....263...8.......1...9..9.6....4....7.5..........."
    "3.7.4...........918........4.....7.....16.......25..........38..9....5...2.6....."
    "........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3"
    ".......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6..."
    ".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6.."
    "1.......2.9.4...5...6...7...5.3.4.......6........58.4...2...6...3...9.8.7.......1"
    ".....1.2.3...4.5.....6....7..2.....1.8..9..3.4.....8..5....2....9..3.4....67....."))

(defvar *hardest20-solutions*
  '("987654321246173985351928746128537694634892157795461832519286473472319568863745219"
    "839465712146782953752391486391824675564173829287659341628537194913248567475916238"
    "123456789457189236869273154271548693346921578985637412512394867698712345734865921"
    "562987413471235689398146275236819754714653928859472361187324596923568147645791832"
    "126395784359847162874621953985416237631972845247538691763184529418259376592763418"
    "174385962293467158586192734451923876928674315367851249719548623635219487842736591"
    "751846239892371465643259871238197546974562318165438927319684752527913684486725193"
    "125374896479618325683952714714269583532781649968435172891546237257893461346127958"
    "123456789457189236896372514249518367538647921671293845364925178715834692982761453"
    "123456789456789123789123456214975638375862914968314275591637842637248591842591367"
    "239187465675394128814562937123879546456213879798456312367945281541728693982631754"
    "743892156518647932962351748624589371879134265351276489496715823287963514135428697"
    "468931527751624839392578461134756298289413675675289314846192753513867942927345186"
    "728946315934251678516738249147593826369482157852167493293615784481379562675824931"
    "317849265245736891869512473456398712732164958981257634174925386693481527528673149"
    "621943758783615492594728361142879635357461289869532174238197546916354827475286913"
    "693784512487512936125963874932651487568247391741398625319475268856129743274836159"
    "673894512912735486845612973798261354526473891134589267469128735287356149351947628"
    "174835962293476158586192734957324816428961375361758249812547693635219487749683521"
    "869571324327849516145623987952368741681497235473215869514982673798136452236754198"))

(1am:test test-sudoku-hardest20
  (loop for input in *hardest20*
        for expected in *hardest20-solutions*
        for actual = (grid-to-string (solve (string-to-grid input)))
        do (1am:is (string= expected actual))))

(1am:test test-irregular-boxes
  (let* ((sudoku-string "....2...12....96..53.....27.923761....71...3...69415.33......9.....6...57...3..1.")
         (box-string "111222233111122223441155233444555533644475593664777593666677799866877999888888899")
         (expected "948527361253719684531698427492376158687154239826941573315482796179263845764835912")
         (actual (grid-to-string (solve (string-to-grid sudoku-string) (string-to-grid box-string)))))
    (1am:is (string= expected actual))))

(1am:test test-sudoku-grid-mistakes
  (let* ((box-string "111222233111122223441155233444555533644475593664777593666677799866877999888888899")
         (box-grid (string-to-grid box-string))
         (good-string "....2...12....96..53.....27.923761....71...3...69415.33......9.....6...57...3..1.")
         (good-grid (string-to-grid good-string))
         (bad-string-1 "....2...12....96..53.....272923761....71...3...69415.33......9.....6...57...3..1.")
         (bad-grid-1 (string-to-grid bad-string-1))
         (bad-string-2 "....2...12....96..53.2...27.923761....71...3...69415.33......9.....6...57...3..1.")
         (bad-grid-2 (string-to-grid bad-string-2)))
    (1am:is (null (sudoku-grid-mistakes good-grid box-grid)))
    (1am:is (equal '((1 . 0) (3 . 0) (3 . 2)) (sudoku-grid-mistakes bad-grid-1 box-grid)))
    (1am:is (equal '((1 . 0) (2 . 3) (2 . 7)) (sudoku-grid-mistakes bad-grid-2 box-grid)))))

(1am:test test-box-grid-mistakes
  (1am:is (null (box-grid-mistakes sudoku-solver::*default-box-grid*)))
  (let ((good-string "111222233111122223441155233444555533644475593664777593666677799866877999888888899"))
    (1am:is (null (box-grid-mistakes (string-to-grid good-string)))))
  (let ((missing-a-one ".11222233111122223441155233444555533644475593664777593666677799866877999888888899"))
    (1am:is (equal '((0 . 0) (0 . 1) (0 . 2) (1 . 0) (1 . 1) (1 . 2) (1 . 3) (2 . 2) (2 . 3))
                   (box-grid-mistakes (string-to-grid missing-a-one)))))
  (let ((too-many-ones "111122233111122223441155233444555533644475593664777593666677799866877999888888899"))
    (1am:is (equal '((0 . 0) (0 . 1) (0 . 2) (0 . 3) (0 . 4) (0 . 5) (0 . 6)
                     (1 . 0) (1 . 1) (1 . 2) (1 . 3) (1 . 4) (1 . 5) (1 . 6) (1 . 7)
                     (2 . 2) (2 . 3) (2 . 6))
                   (box-grid-mistakes (string-to-grid too-many-ones)))))
  (let ((separate-1-and-8 "811222233111122223441155233444555533644475593664777593666677799866877999888818899"))
    (1am:is (equal '((0 . 0) (8 . 4))
                   (box-grid-mistakes (string-to-grid separate-1-and-8))))))
